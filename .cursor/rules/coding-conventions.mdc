---
description: 
globs: 
alwaysApply: false
---
# Coding Conventions

This project follows specific coding conventions to maintain consistency across the codebase.

## TypeScript

- All new code should be written in TypeScript
- Types are defined in `src/types` directory
- Use explicit typing, avoid using `any`

## Component Structure

- React functional components with hooks
- Components are organized in directories based on their feature or purpose
- UI components in `src/components/ui`
- Each feature has its own components in respective directories

## File Naming

- PascalCase for component files: `Button.tsx`
- camelCase for utility files and hooks: `useSession.ts`
- Kebab-case for directories: `auth-handler`

## Styling

- Tailwind CSS for styling
- Use className with tailwind utility classes
- Complex components may use TailwindMerge for conditional classes

## State Management

- React Context for global state
- SWR for server state
- Local component state with useState/useReducer

## Imports

- Absolute imports are used where possible
- Group imports by source (libraries, then internal)

